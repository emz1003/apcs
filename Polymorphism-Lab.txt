There are 11 questions in this lab.
===================================


A super class reference can denote objects of its subclasses.

ex.  Coin c1 = new Coin(); // ok
     Coin c2 = new BiasedCoin(); //ok b/c a BiasedCoin is a Coin
     BiasedCoin c3 = new Coin(); // Compiler error: b/c Coin is not a BiasedCoin

Polymorphism
============
Which object a reference will actually denote during runtime cannot be
determined at compile time. Polymorphism allows a reference to denote different
objects in the inheritance hierarchy at different times during execution.

ex.
       Coin c ;
       if (Math.random() < 0.5)
           c = new Coin();
       else
           c = new BiasedCoin(0.2); // chance of H is 20%

Dynamic Method LookUp
======================
When a method is invoked using a reference the method definition which actually
gets executed is determined by the class of the object denoted by the reference
at runtime.

ex.     Coin c;
        if (Math.random() < 0.5) c = new Coin();
	else c = new BiasedCoin(0.2);
	c.flip();


   At Compilation:   The compiler will search the Coin class to ensure
                     that flip() is defined; therefore the code will compile
                     successfully.
   At Run Time :     The version of flip() is based on the actual Object type.

=============================================================================
 QUESTIONS: 1 - 4 : Given the code from above.
============================================================================
1. What is the chance of flipping a H?
  0.35

2. Will this code compile? Explain.

         Object c = new Coin();
	 c.flip();

   No, because the method flip() is not defined in the Object class.

For quesions 3 and 4 consider this code:

         Flippable c = new BiasedCoin(0.2);
	 c.flip();

3. Will this compile?

      Yes, because flippable has an abstract method, flip() that is required for the code to compile.

4. Will it run?

  Yes.

============================================================================
   Inheritance
============================================================================
Any instance variable that is declared private in the superclass cannot
be directly accessed by a subclass, although it is inherited by the subclass.

Ex.

Given

 // Class A
 public class A{

      private int x;
      public A(int x) { this.x = x;}
      public int f() { return x + 2; }
      public int g() { return x - 2; }
}

How are these superclass properties initialized, if they can't be accessed
directly in a subclass? When an object is instantiated, the first thing its
constructor does is to call the superclass's constructor.

If we do not explicitly invoke the superclass's constructor, Java does it
for us.


 // Class B
 public class B extends A{

      private int y;
      public B(int y) { super(1);  this.y = y;}
      public int g() { return  3 * y;}
 }

// Class C
 public class C extends B{

      private int z;
      public C(int z) {super(2);  this.z = z;}
      public int h() { return f() + g() + z; }
 }

============================================================================
 QUESTIONS 5 - 10
============================================================================
Identify whether each statement will compile and if so,
determine the result each method call.

5. Given :  A a = new A(10);

      (a). a.f();   Yes, 12.
      (b). a.g();   Yes, 8.

6. Given :  A b = new B(10);

      (a). b.f(); Yes, 3.
      (b). b.g(); Yes, 30.

7. Given :    C c = new C(10);

      (a). c.f();  Yes, 3.
      (b). c.g();  Yes, 6.
      (c). c.h();  Yes, 19.

8. Given :     A c = new C(10);

      (a). c.f(); Yes, 3.
      (b). c.g(); Yes, 6.
      (c). c.h(); No.


9. Given :     C d = new C(10);

     (a). ((A)d).f();  Yes 12.
     (b). ((A)d).g();  Yes 8.
     (c). ((A)d).h();  No.

10. Consider:

    interface Interface1 {
    	      public int f(int x);
    }

    public class R implements Interface1{

             public int f(int x){
                return 2 * x;
   	     }

	     public int g(int x){
	     	 return 10;
             }

	     @Override
	     public String toString(){
	     	    return "Howdy";
	     }
   }

  Given :
    Interface1 t1 = new R();
	  R t2 = (R)t1;

  (a). t1.f(1); 2.
	(b). t2.f(1); 2.
	(c). t1.g(1); No.
	(d). t2.g(1); 10.
	(e). t1.toString(); Howdy
	(f). t2.toString(); Howdy


=============================================================================
 Clients that use a Coin object.
=============================================================================

11. Write a program Children.java that answers the following question.
    A couple beginning a family decides to keep having children until they have
    at least one of either sex. Estimate the average number of children they
    will have via simulation. Also estimate the most common outcome (record
    the frequency counts for 2, 3, and 4 children, and also for 5 and above).
    Assume that the probability p of having a boy or girl is 1/2.
